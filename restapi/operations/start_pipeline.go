// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StartPipelineHandlerFunc turns a function with the right signature into a start pipeline handler
type StartPipelineHandlerFunc func(StartPipelineParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StartPipelineHandlerFunc) Handle(params StartPipelineParams) middleware.Responder {
	return fn(params)
}

// StartPipelineHandler interface for that can handle valid start pipeline params
type StartPipelineHandler interface {
	Handle(StartPipelineParams) middleware.Responder
}

// NewStartPipeline creates a new http.Handler for the start pipeline operation
func NewStartPipeline(ctx *middleware.Context, handler StartPipelineHandler) *StartPipeline {
	return &StartPipeline{Context: ctx, Handler: handler}
}

/* StartPipeline swagger:route POST /pipeline/{name} startPipeline

Start pipeline build

*/
type StartPipeline struct {
	Context *middleware.Context
	Handler StartPipelineHandler
}

func (o *StartPipeline) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStartPipelineParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
